
/*
 *  OGF/Graphite: Geometry and Graphics Programming Library + Utilities
 *  Copyright (C) 2000-2015 INRIA - Project ALICE
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 *  If you modify this software, you should include a notice giving the
 *  name of the person performing the modification, the date of modification,
 *  and the reason for such modification.
 *
 *  Contact for Graphite: Bruno Levy - Bruno.Levy@inria.fr
 *  Contact for this Plugin: Bruno Levy - Bruno.Levy@inria.fr
 *
 *     Project ALICE
 *     LORIA, INRIA Lorraine, 
 *     Campus Scientifique, BP 239
 *     54506 VANDOEUVRE LES NANCY CEDEX 
 *     FRANCE
 *
 *  Note that the GNU General Public License does not permit incorporating
 *  the Software into proprietary programs. 
 *
 * As an exception to the GPL, Graphite can be linked with the following
 * (non-GPL) libraries:
 *     Qt, tetgen, SuperLU, WildMagic and CGAL
 */
 

#include <OGF/RayTracing/shaders/mesh_grob_ray_tracing_shader.h>
#include <OGF/renderer/context/rendering_context.h>
#include <OGF/gom/interpreter/interpreter.h>
#include <geogram/mesh/mesh_geometry.h>
#include <geogram/mesh/mesh_io.h>
#include <geogram/image/image_library.h>


namespace OGF {

    RayTracingMeshGrobShader::RayTracingMeshGrobShader(
        OGF::MeshGrob* grob
    ):
	MeshGrobShader(grob),
	texture_(0),	
	AABB_(*grob)
    {
	// AABB changed facet order, need to notify
	mesh_grob()->update();
	
        color_ = Color(0.5, 0.5, 1.0, 0.5);
	spec_ = 1.0;
	spec_factor_ = 20;
	smooth_ = false;
	shadows_ = false;
	ext_ = 30;
	transp_ = false;
	raytrace_background_ = false;
	
	facet_normal_.bind(
	    mesh_grob()->facets.attributes(), "normal"
	);
	vertex_normal_.bind(
	    mesh_grob()->vertices.attributes(), "normal"
	);
	facet_corner_normal_.bind(
	    mesh_grob()->facet_corners.attributes(), "normal"
	);
	FOR(f, mesh_grob()->facets.nb()) {
	    facet_normal_[f] = Geom::mesh_facet_normal(*mesh_grob(),f);
	}
	FOR(v, mesh_grob()->vertices.nb()) {
	    vertex_normal_[v] = vec3(0.0, 0.0, 0.0);
	}
	FOR(f, mesh_grob()->facets.nb()) {
	    for(index_t c=mesh_grob()->facets.corners_begin(f);
		c < mesh_grob()->facets.corners_end(f); ++c
	    ) {
		index_t v = mesh_grob()->facet_corners.vertex(c);
		vertex_normal_[v] += facet_normal_[f];
	    }
	}
	FOR(v, mesh_grob()->vertices.nb()) {
	    vertex_normal_[v] = normalize(vertex_normal_[v]);
	}
	FOR(f, mesh_grob()->facets.nb()) {
	    facet_normal_[f] = normalize(facet_normal_[f]);
	}
	FOR(c, mesh_grob()->facet_corners.nb()) {
	    index_t v = mesh_grob()->facet_corners.vertex(c);
	    facet_corner_normal_[c] = vertex_normal_[v];
	}
	bbox_diag_ = bbox_diagonal(*mesh_grob());
	copy_background_queued_ = false;
    }
        
    RayTracingMeshGrobShader::~RayTracingMeshGrobShader() {
	if(texture_ != 0) {
	    glDeleteTextures(1, &texture_);
	    texture_ = 0;
	}
    }        

    void RayTracingMeshGrobShader::draw() {
	create_or_resize_image_if_needed();
	update_viewing_parameters();
	if(copy_background_queued_) {
	    do_copy_background();
	    copy_background_queued_ = false;
	}
	raytrace();
	draw_image();
    }

    void RayTracingMeshGrobShader::do_copy_background() {

	index_t w = image_->width();
	index_t h = image_->height();
	
	if(background_image_.is_null() ||
	   background_image_->width() != w ||
	   background_image_->height() != h
	) {
	    background_image_ = new Image(Image::RGB, Image::BYTE, w, h);
	}
	
	if(background_depth_.is_null() ||
	   background_depth_->width() != w ||
	   background_depth_->height() != h
	) {
	    background_depth_ = new Image(
		Image::GRAY, Image::FLOAT32, w, h
	    );
	}
	
	glReadPixels(
	    0, 0,
	    GLsizei(w), GLsizei(h),
	    GL_RGB, GL_UNSIGNED_BYTE,
	    background_image_->base_mem()
	);

	glReadPixels(
	    0, 0,
	    GLsizei(w), GLsizei(h),
	    GL_DEPTH_COMPONENT, GL_FLOAT,
	    background_depth_->base_mem()
	);

	background_mesh_.clear();
	if(!background_mesh_color_.is_bound()) {
	    background_mesh_color_.create_vector_attribute(
		background_mesh_.vertices.attributes(), "color", 3
	    );
	}
	
	FOR(Y, h) {
	    FOR(X, w) {
		double x = double(X);
		double y = double(Y);
		double z = double(
		    *background_depth_->pixel_base_float32_ptr(X,Y)
		);
		vec4 p(
		    2.0*((x - viewport_[0]) / viewport_[2]-0.5),
		    2.0*((y - viewport_[1]) / viewport_[3]-0.5),
		    2.0*(z-0.5),
		    1.0
		);
		p = mult(inv_project_modelview_,p);
		index_t v = background_mesh_.vertices.create_vertex(
		    vec3(p.x/p.w, p.y/p.w, p.z/p.w).data()
	        );
		Memory::byte* c = background_image_->pixel_base(X,Y);
		background_mesh_color_[3*v  ] = double(c[0])/255.0;
		background_mesh_color_[3*v+1] = double(c[1])/255.0;
		background_mesh_color_[3*v+2] = double(c[2])/255.0;  
	    }
	}

	FOR(Y, h-1) {
	    FOR(X, w-1) {
		if(
		    *background_depth_->pixel_base_float32_ptr(X,Y)   == 1.0f ||
		    *background_depth_->pixel_base_float32_ptr(X,Y+1) == 1.0f ||
		    *background_depth_->pixel_base_float32_ptr(X+1,Y) == 1.0f ||
		    *background_depth_->pixel_base_float32_ptr(X+1,Y+1) == 1.0f
		) {
		    continue;
		}
		index_t v11 =  X    +  Y    * w;
		index_t v12 =  X    + (Y+1) * w;
		index_t v21 = (X+1) +  Y    * w;
		index_t v22 = (X+1) + (Y+1) * w;
		background_mesh_.facets.create_triangle(v11, v12, v22);
		background_mesh_.facets.create_triangle(v11, v22, v21);		
	    }
	}
	background_mesh_.vertices.remove_isolated();
	
	background_mesh_AABB_.initialize(background_mesh_);

	mesh_save(background_mesh_, "background.geogram");
    }
    
    void RayTracingMeshGrobShader::create_or_resize_image_if_needed() {

	// Get window size
	Object* main=Interpreter::instance_by_language("Lua")->
	    resolve_object("main");
	index_t w,h;
	{
	    Any tmp;
	    main->get_property("width",tmp);
	    tmp.get_value(w);
	    main->get_property("height",tmp);	
	    tmp.get_value(h);
	}

	if(image_.is_null() ||
	   image_->width() != w ||
	   image_->height() != h
	) {
	    image_ = new Image(Image::RGBA, Image::BYTE, w, h);
	    FOR(y, h) {
		FOR(x, w) {
		    Memory::byte* p = image_->pixel_base(x,y);
		    if(((x / 32) & 1) ^ ((y / 32) & 1)) {
			p[0] = 255;
			p[1] = 255;
			p[2] = 255;
			p[3] = 255;
		    } else {
			p[0] = 127;
			p[1] = 127;
			p[2] = 127;
			p[3] = 127;
		    }
		}
	    }
	}
    }

    void RayTracingMeshGrobShader::update_viewing_parameters() {
	GLint viewport[4];
	glGetIntegerv(GL_VIEWPORT, viewport);
	FOR(i,4) {
	    viewport_[i] = double(viewport[i]);
	}
	
	mat4 modelview;
	glupGetMatrixdv(GLUP_MODELVIEW_MATRIX, modelview.data());
	mat3 normalmatrix;
	FOR(i,3) {
	    FOR(j,3) {
		normalmatrix(i,j) = modelview(i,j);
	    }
	}
	modelview = modelview.transpose();
	mat4 project;
	glupGetMatrixdv(GLUP_PROJECTION_MATRIX, project.data());
	project = project.transpose();
	
	inv_project_modelview_ = (project*modelview).inverse();

	float Lf[3];
	glupGetLightVector3fv(Lf);
	
	L_ = vec3(Lf[0], Lf[1], Lf[2]);
	L_ = normalize(mult(normalmatrix,L_));
    }

    RayTracingMeshGrobShader::Ray RayTracingMeshGrobShader::primary_ray(
	index_t X, index_t Y
    ) {
	double x = double(X);
	double y = double(Y);
		    
	vec4 near(
	    2.0*((x - viewport_[0]) / viewport_[2]-0.5),
	    2.0*((y - viewport_[1]) / viewport_[3]-0.5),
	    -1.0,
	    1.0
	);
	vec4 far = near;
	far.z = 1.0;
	near = mult(inv_project_modelview_,near);
	far = mult(inv_project_modelview_,far);


	vec3 nearp = (1.0/near.w)*vec3(near.x, near.y, near.z);
	vec3 farp  = (1.0/far.w )*vec3(far.x , far.y , far.z );

	return Ray(nearp, farp-nearp);
    }

    vec3 RayTracingMeshGrobShader::normal(index_t f, const vec3& p) {
	if(smooth_) {

	    // If facet is a triangle, interpolate normals
	    // using barycentric coords in triangle.
	    if(mesh_grob()->facets.nb_vertices(f) == 3) {
		index_t c0 = mesh_grob()->facets.corners_begin(f);
		index_t v0 = mesh_grob()->facet_corners.vertex(c0);
		vec3 p0(mesh_grob()->vertices.point_ptr(v0));
		index_t c1 = c0+1;
		index_t v1 = mesh_grob()->facet_corners.vertex(c1);
		vec3 p1(mesh_grob()->vertices.point_ptr(v1));
		index_t c2 = c1+1;
		index_t v2 = mesh_grob()->facet_corners.vertex(c2);
		vec3 p2(mesh_grob()->vertices.point_ptr(v2));
		double A =  Geom::triangle_area(p0,  p1, p2);
		double l0 = Geom::triangle_area(p,  p1, p2)/A;
		double l1 = Geom::triangle_area(p0, p,  p2)/A;
		double l2 = Geom::triangle_area(p0, p1, p )/A;
		return normalize(
		    l0 * facet_corner_normal_[c0] +
		    l1 * facet_corner_normal_[c1] +
		    l2 * facet_corner_normal_[c2]
		);
	    }


	    // If facet is a polygon, decompose it on the fly into
	    // triangles, find the triangle that contains the point,
	    // (characterized by lambda1 + lambda2 + lambda3 = 1.0)
	    // then interpolate normals in that triangle using
	    // barycentric coordinates.
	    vec3 g = Geom::mesh_facet_center(*mesh_grob(),f);
	    
	    for(index_t c1 = mesh_grob()->facets.corners_begin(f);
		c1<mesh_grob()->facets.corners_end(f); ++c1
	    ) {
		index_t v1 = mesh_grob()->facet_corners.vertex(c1);
		vec3 p1(mesh_grob()->vertices.point_ptr(v1));
		index_t c2 = mesh_grob()->facets.next_corner_around_facet(f,c1);
		index_t v2 = mesh_grob()->facet_corners.vertex(c2);		
		vec3 p2(mesh_grob()->vertices.point_ptr(v2));

		double A =  Geom::triangle_area(g, p1, p2);
		double l0 = Geom::triangle_area(p, p1, p2)/A;
		double l1 = Geom::triangle_area(g, p,  p2)/A;
		double l2 = Geom::triangle_area(g, p1, p )/A;

		if(l0 + l1 + l2 < 1.01) {
		    return normalize(
			l0 * facet_normal_[f] +
			l1 * facet_corner_normal_[c1] +
			l2 * facet_corner_normal_[c2]
		    );
		}
	    }
	    return vec3(0.0, 0.0, 0.0);
	} 
	return facet_normal_[f];
    }
    
    void RayTracingMeshGrobShader::raytrace() {
	parallel_for(0, image_->height(),
	   [this](index_t Y) {
		FOR(X, image_->width()) {
		    Ray ray = primary_ray(X,Y);
		    index_t f;
		    double t;
		    if(
			AABB_.segment_nearest_intersection(
			    ray.origin,ray.origin+ray.direction,t,f
			)
		    ) {
			vec4 color(0.0, 0.0, 0.0, 1.0 - transp_);
			vec3 p = ray.origin + t*ray.direction;
			bool shadow = shadows_ && AABB_.segment_intersection(
			    p-1e-6*ray.direction, p+1000.0*L_
			);

			vec3 Kr(0.0, 0.0, 0.0);
			vec3 Ks(0.0, 0.0, 0.0);
			double spec=0.0;

			vec3 N = normal(f, p);
			
			if(!shadow) {
			    double diff = std::max(0.0, dot(L_,N));
			    diff = std::min(diff, 1.0);

			    Kr.x += diff * color_.r();
			    Kr.y += diff * color_.g();
			    Kr.z += diff * color_.b();			    
			    
			    if(spec_ != 0.0) {
				vec3 R = normalize(reflect_vector(L_,N));
				spec = dot(R,normalize(ray.direction));
				spec = std::max(spec, 0.0);
				spec = pow(spec, double(spec_factor_));
				spec *= spec_;
				Ks.x += spec;
				Ks.y += spec;
				Ks.z += spec;
			    }
			}
			vec3 K;
			
			if(transp_) {
			    vec3 Kt(color_.r(), color_.g(), color_.b());
			    double d = 0.0;
			    if(transp_ && ext_ != 0) {
				d = traversed_dist(ray) * double(ext_) *
				    bbox_diag_;
				Kt.x *= (1.0 - d);
				Kt.y *= (1.0 - d);
				Kt.z *= (1.0 - d);
			    }
			    double fresnel = 1.0 + dot(ray.direction,N) /(length(ray.direction) * length(N));
			    geo_clamp(fresnel, 0.0, 1.0);
			    // fresnel = pow(1.0-fresnel, 3.5);
			    // fresnel = 1.0-fresnel;
			    vec3 K = fresnel * (Kr + Ks) + (1.0 - fresnel) * Kt;
			    color.x = K.x;
			    color.y = K.y;
			    color.z = K.z;
			    color.w = fresnel + (1.0 - fresnel) * d; // + spec;
			} else {
			    vec3 K = (Kr + Ks);
			    color.x = K.x;
			    color.y = K.y;
			    color.z = K.z;
			    color.w = 1.0;
			}
			set_pixel(X,Y,color);
		    } else {
			if(raytrace_background_ && background_mesh_AABB_.mesh() != nullptr) {
			    vec3 c = raytrace_background(ray);
			    set_pixel(X,Y,vec4(c.x, c.y, c.z, 1.0));
			} else {
			    image_->pixel_base(X,Y)[3] = 0;
			}
		    }
		}
	    }
	);
    }

    double RayTracingMeshGrobShader::traversed_dist(const Ray& ray) {
	vec3 dir = ray.direction;
	vec3 p   = ray.origin;
	double l = length(dir);
	double result = 0;
	for(index_t i=0; i<10; ++i) {
	    p += (1e-6/l) * dir;
	    double t;
	    index_t f;
	    if(!AABB_.segment_nearest_intersection(
		p,p+dir,t,f
	    )) {
		return result;
	    }
	    if(dot(dir, facet_normal_[f]) > 0.0) {
		result += t/l;
	    }
	    p += t*dir;
	}
	return result;
    }

    vec3 RayTracingMeshGrobShader::raytrace_background(const Ray& r_in) {
	Ray r = r_in;
	r.direction *= 2.0;
	index_t f;
	double t;
	vec3 result(0.0, 0.0, 0.0);
	if(background_mesh_AABB_.segment_nearest_intersection(
	     r.origin,r.origin+r.direction,t,f
	)) {
	     index_t c0 = background_mesh_.facets.corners_begin(f);
	     index_t v0 = background_mesh_.facet_corners.vertex(c0);
	     vec3 p0(background_mesh_.vertices.point_ptr(v0));
	     index_t c1 = c0+1;
	     index_t v1 = background_mesh_.facet_corners.vertex(c1);
	     vec3 p1(background_mesh_.vertices.point_ptr(v1));
	     index_t c2 = c1+1;
	     index_t v2 = background_mesh_.facet_corners.vertex(c2);
	     vec3 p2(background_mesh_.vertices.point_ptr(v2));
	     vec3 p = r.origin + t * r.direction;	     
	     double A =  Geom::triangle_area(p0,  p1, p2);
	     double l0 = Geom::triangle_area(p,  p1, p2)/A;
	     double l1 = Geom::triangle_area(p0, p,  p2)/A;
	     double l2 = Geom::triangle_area(p0, p1, p )/A;
	     result.x =
		 l0 * background_mesh_color_[3*v0] +
		 l1 * background_mesh_color_[3*v1] +
		 l2 * background_mesh_color_[3*v2] ;
	     result.y =
		 l0 * background_mesh_color_[3*v0+1] +
		 l1 * background_mesh_color_[3*v1+1] +
		 l2 * background_mesh_color_[3*v2+1] ;
	     result.z =
		 l0 * background_mesh_color_[3*v0+2] +
		 l1 * background_mesh_color_[3*v1+2] +
		 l2 * background_mesh_color_[3*v2+2] ;
	}
	return result;
    }
    
    void RayTracingMeshGrobShader::draw_image() {
	if(texture_ == 0) {
	    glGenTextures(1, &texture_);
	}
	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D, texture_);
	glTexImage2D(
	    GL_TEXTURE_2D, 0, GL_RGBA,
	    GLsizei(image_->width()), GLsizei(image_->height()),
	    0, GL_RGBA, GL_UNSIGNED_BYTE,
	    image_->base_mem()
	);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glViewport(0, 0, GLsizei(image_->width()), GLsizei(image_->height()));
	glDisable(GL_DEPTH_TEST);
	glEnable(GL_BLEND);
	glBlendEquation(GL_FUNC_ADD);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	draw_unit_textured_quad();
	glDisable(GL_BLEND);
	glBindTexture(GL_TEXTURE_2D, 0);
    }

    
}
