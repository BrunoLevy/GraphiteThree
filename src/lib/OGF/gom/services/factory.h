/*
 *  OGF/Graphite: Geometry and Graphics Programming Library + Utilities
 *  Copyright (C) 2000 Bruno Levy
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 *  If you modify this software, you should include a notice giving the
 *  name of the person performing the modification, the date of modification,
 *  and the reason for such modification.
 *
 *  Contact: Bruno Levy
 *
 *     levy@loria.fr
 *
 *     ISA Project
 *     LORIA, INRIA Lorraine, 
 *     Campus Scientifique, BP 239
 *     54506 VANDOEUVRE LES NANCY CEDEX 
 *     FRANCE
 *
 *  Note that the GNU General Public License does not permit incorporating
 *  the Software into proprietary programs. 
 */
 
#ifndef H_OGF_BASIC_PATTERNS_FACTORY_H
#define H_OGF_BASIC_PATTERNS_FACTORY_H

#include <OGF/gom/common/common.h>

/**
 * \file OGF/gom/services/factory.h
 * \brief Classes to create objects from type name and argument list.
 */

namespace OGF {
    
//____________________________________________________________________________

    class Object ;
    class ArgList ;
    class MetaClass ;

   /**
    * \brief Creates instances of a specific class.
    * \details Converts the argument, stored in a generic
    *  ArgList, and passes them to the constructor. Factories
    *  are generated by the GomCodeGenerator.
    */
    class GOM_API Factory : public Counted {
    public:

        /**
         * \brief Factory constructor.
         */
        Factory() {
        }

        /**
         * \brief Factory destructor.
         */
        virtual ~Factory() ;

        /**
         * \brief Creates an object based of user-supplied parameters.
         * \param[in] args the set of parameters supplied by 
         *    client code
         * \retval a pointer to the created object if successful
         * \retval nil if the argument list does not match any
         *   constructor of the object
         */
        virtual Object* create(const ArgList& args) = 0 ;
    } ;

    /**
     * \brief Automatic reference-counted pointer to a Factory.
     */
    typedef SmartPointer<Factory> Factory_var ;

//____________________________________________________________________________

}

#endif
