/*
 *  Copyright (c) 2012-2014, Bruno Levy
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *  this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 *  * Neither the name of the ALICE Project-Team nor the names of its
 *  contributors may be used to endorse or promote products derived from this
 *  software without specific prior written permission.
 * 
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *
 *  If you modify this software, you should include a notice giving the
 *  name of the person performing the modification, the date of modification,
 *  and the reason for such modification.
 *
 *  Contact: Bruno Levy
 *
 *     Bruno.Levy@inria.fr
 *     http://www.loria.fr/~levy
 *
 *     ALICE Project
 *     LORIA, INRIA Lorraine, 
 *     Campus Scientifique, BP 239
 *     54506 VANDOEUVRE LES NANCY CEDEX 
 *     FRANCE
 *
 */

namespace GEO {

/**

\page graphite_compiling Instructions for compiling Graphite

Table of Contents:

A] How to compile it under Windows

B] How to compile it under Linux

C] Generating the documentation

D] How to create a standalone binary version (Windows)

A] How to compile it under Windows
==================================

1. Prerequisites:
-----------------

   - Microsoft Visual C++ (tested with ver. 2012, 2013, 2015, 2017,
       works probably with any version >= 2008) \n
       If you do not have a version of Visual C++ already, you can download Visual Studio Community from: \n
        https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx

   - Cmake (ver >= 2.8.11) \n
       Download from: https://cmake.org/download/ \n
       Use the Win32-x86 installer \n
       (yes, you can use a 32 bits version of CMake to compile Graphite/// in 64 bits, see C.4)
   
   - (Note: Python and Qt are no longer needed/used).

2. Configuration:
-----------------

   Double click on "configure.bat", this will automatically detect and use the
most recent visual C++ and Qt installed on the machine. This will generate a
single all-in-one Visual C++ solution with both Graphite and Geogram.

3. Compiling Graphite:
----------------------

- Open graphite3-vvv-rrr/GraphiteThree/build/Windows/Graphite.sln
- Default configuration is Debug -> choose Release (pulldown menu top right)
- BUILD menu -> build solution
- In Solution Explorer, right click on 'graphite' project,
   set it as startup project
- start Graphite with <Ctrl><F5>
- Alternatively, you can directly start the executable by clicking on it,
it is in graphite3-vvv-rrr/GraphiteThree/build/Windows/Release/bin/graphite.exe
(or you can create a shortcut on the desktop)

4. Troubleshooting
------------------

  What can go wrong is mostly detecting Qt. If things do
not work as expected, you can directly edit the file CMakeLists.txt in
-  src/lib/OGF/skin_qt5/CMakeLists.txt
and hardwire the path to your local installation in there. (Alternatively you
can also set WHERE_IS_QT variables using cmake-gui).

B] How to compile it under Linux
================================

1. Prerequisites:
-----------------
   - g++
   - Cmake (ver >= 2.8.11)
   - Note: Qt and Python are no longer needed

2. Using the all-in-one generation script:
------------------------------------------

\code
cd graphite3-vvv-rrr/
./make_it.sh
\endcode

If everything goes well, you can start Graphite/// with:
\code
bin/graphite
\endcode

Note: makeit.sh needs to be started from the directory that contains it
("./make_it.sh"), do not use "graphite3-vvv-rrr/makeit.sh", it will not 
work (you need to 'cd' there before launching "make_it.sh"). This will 
compile both geogram and Graphite.

3. Troubleshooting
------------------

  What can go wrong is mostly finding Qt (depending on Linux
distributions, they may or may not be properly declared to CMake). \n
If things do not work as expected, you can directly edit the file CMakeLists.txt in
- src/lib/OGF/skin_qt5/CMakeLists.txt
and hardwire the path to your local installation in there.

  Here are the instructions to compile Geogram and Graphite (you may want
to do that if you play with the CMakeLists):

   3.1. Compiling Graphite and Geogram :
   - - - - - - - - - - - - - - - - - - -

\code
cd graphite3-vvv-rrr/GraphiteThree/
./configure.sh
cd build/Linux64-gcc-dynamic-Release
make -j8
\endcode

Generated binary is in : \n
Graphite3-vvv-rrr/GraphiteThree/build/Linux64-gcc-dynamic-Release/bin/graphite

4. Tuning Compilation Parameters:
---------------------------------

If a file named CMakeOptions.txt is found in Graphite3-vvv-rrr/geogram/
or Graphite3-vvv-rrr/GraphiteThree/, then it is included by CMake. You
can use this mechanism to specify some variables and override system
settings.

C] Generating the documentation
===============================

A (hopefully reasonably) up-to-date version of the documentation
is available [here](http://alice.loria.fr/software/graphite/doc/html/).
You may want to generate the documentation from your own version, or
change some options of documentation generation.

Linux 
-----

You will need "doxygen" to generate the documentation.

\code
sh -f configure.sh
cd build/Linux64-gcc-Release
make doc
\endcode

This generates the documentation in doc/doc/html

D] How to create a standalone binary version (Windows)
======================================================

To create a standalone binary version (that can be zipped and
given to somebody else, or that can be carried on a USB key and executed
everywhere), there is an automatic script. It is in:

\code
   lib/make_windows_dist.lua
\endcode

Start it using GEL/execute file. Enter the version tag in the dialog
box (just use to name the archive, chose whatever you want). This will
generate a standalone binary distribution of Graphite in GRAPHITEDIST/GraphiteThree
as well as a zip archive.

 Note: using the standalone Graphite may require to install Visual C++
redistribuable package on the machine where it will be executed.

What it does
------------

It copies the following files:

- create a subdirectory "QtPlugins" in GraphiteThree/build/Windows/bin/Release/QtPlugins
- copy the "platforms" subdirectory found in the plugins/ subdirectory of the Qt distribution

 When Graphite detects the presence of the QtPlugins subdirectory in its file
hierarchy, it redefines the path used by Qt to this subdirectory. Thus Graphite
can run anywhere. It does not need any installation process, just start graphite.exe from the
bin/ subdirectory.

*/
}


